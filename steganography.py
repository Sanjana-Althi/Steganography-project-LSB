# -*- coding: utf-8 -*-
"""Steganography.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BqOxCipzulWN1tiQTpD9z7uHkkNqP34r
"""

import numpy as np

#create ASCII mapping dictionaries
d = {chr(i):i for i in range (256)} # char ti int (ASCII value)
c = {i: chr(i) for i in range(256)} # int to char

# Message and encryption key
text = "HELLO"
key = "KEY"

# Create a dummy 10x10 RGB image with random pixel values
x = np.random.randint(0, 256, (10, 10, 3), dtype=np.uint8)

x_enc = x.copy()

n, m, z = 0, 0, 0 # pixel row, column, channel
kl = 0          # index for key
l = len(text)   # number of characters to encode

# Encrypt and embed using LSB
for i in range(l):
    char_val = d[text[i]] ^ d[key[kl]]
    for bit_pos in range(8):
        bit = (char_val >> (7 - bit_pos)) & 1
        original_val = x_enc[n, m, z]
        x_enc[n, m, z] = (original_val & 0XFE) | bit
        print(f"Embedding bit {bit} of '{text[i]}' at ({n},{m},{z}) originale:{original_val} neue:{x_enc[n,m,z]}")

        z = (z + 1) % 3
        if z == 0:
            m = m + 1
            if m == x_enc.shape[1]:
                n = n + 1
                m = 0

    kl = (kl + 1) % len(key)

# ============ DECRYPTION ============

n, m, z = 0, 0, 0
kl = 0
decrypt = ""

for i in range(l):  # 'l' is the length of the original text, from earlier
    val = 0
    for bit_pos in range(8):
        bit = x_enc[n, m, z] & 1
        val = (val << 1) | bit
        print(f"Reading bit {bit} from ({n},{m},{z})")

        z = (z + 1) % 3
        if z == 0:
            m = m + 1
            if m == x_enc.shape[1]:
                n = n + 1
                m = 0

    orig_char = c[val ^ d[key[kl]]]
    decrypt += orig_char
    print(f"Decrypted byte: (val XOR d[key[kl]]) = {val ^ d[key[kl]]} -> '{orig_char}'")
    kl = (kl + 1) % len(key)

print(f"Decrypted text: '{decrypt}'")

# Reading bits from (0,0,0)